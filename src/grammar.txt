NOTE: #comment#
#This file describes the grammar of the language.#

statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement   : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : KEYWORD:super call_func
            : class-expr
            : tag-expr
            : enum-expr
            : expr

tag-expr:   : KEYWORD:class IDENTIFIER COLON (KEYWORD:pass)?
                KEYWORD:prop (QMARK)? IDENTIFIER (COLON Types)? EQUALS expr
                | KEYWORD:state IDENTIFIER (COLON Types)? EQUALS expr
                | KEYWORD:method IDENTIFIER call_func
                # greedy
                KEYWORD:end

enum-expr   : KEYWORD:enum IDENTIFIER COLON (KEYWORD:pass)? |
                (IDENTIFIER COMMA)*
                (KEYWORD:end)

class-expr  : KEYWORD:class IDENTIFIER (KEYWORD:extends IDENTIFIER) COLON (KEYWORD:pass)?
                (KEYWORD:private|KEYWORD:public|KEYWORD:protected)? (KEYWORD:override)? (KEYWORD:static)? KEYWORD:property IDENTIFIER (COLON Types)? EQUALS expr
                | (KEYWORD:PRIVATE|KEYWORD:public|KEYWORD:protected)? (KEYWORD:override)? (KEYWORD:static)? KEYWORD:method IDENTIFIER call_func
                | (KEYWORD:get) IDENTIFIER call_func
                | (KEYWORD:set) IDENTIFIER call_func
                # greedy
                KEYWORD:end

expr        : KEYWORD:VAR IDENTIFIER (COLON Types)? (EQUALS expr)?
            : KEYWORD:DEFINE IDENTIFIER (COLON Types)? EQUALS expr
            : KEYWORD:DELETE call
            : html-expr

html-expr   : (LCHEVRON IDENTIFIER (DOT IDENTIFIER)* (HASH IDENTIFIER)? (ARROBASE IDENTIFIER EQUALS LBRACK prop RBRACK)* (IDENTIFIER EQUALS (LBRACK cond-expr RBRACK)|atom)* RCHEVRON (cond-expr)?)
                | (LCHEVRON RCHEVRON)
                    (LCHEVRON IDENTIFIER (DOT IDENTIFIER)* (HASH IDENTIFIER)? (ARROBASE IDENTIFIER EQUALS LBRACK prop RBRACK)* (IDENTIFIER EQUALS (LBRACK cond-expr RBRACK)|atom)* RCHEVRON (cond-expr)?)*
                    (INDENTATION* (LCHEVRON IDENTIFIER (DOT IDENTIFIER)* (HASH IDENTIFIER)? (ARROBASE IDENTIFIER EQUALS LBRACK prop RBRACK)* (IDENTIFIER EQUALS (LBRACK cond-expr RBRACK)|atom)* RCHEVRON (cond-expr)?)*)*
                    | if_expr
                    | for_expr
                    | foreach_expr
                  (LCHEVRON SLASH RCHEVRON)
            : cond-expr

cond-expr   : comp-expr ((KEYWORD:AND|KEYWORD:OR|AND|OR) comp-expr)*
            
comp-expr   : NOT comp-expr
            : bin-op ((DOUBLE_EQUALS|NOT_EQUAL|LT|GT|LTE|GTE|NULLISH) bin-op)*

bin-op      : arith-expr ((BINARY_LEFT|BINARY_RIGHT|BINARY_UNSIGNED_RIGHT|LOGICAL_AND|LOGICAL_XOR|LOGICAL_OR) (EQUALS expr)?|bin-op)*
            : arith-expr (KEYWORD:instanceof IDENTIFIER)?

arith-expr  : term ((PLUS|MINUS) (EQUALS expr)?|term)*
            : term (INC|DEC)*

term        : factor (((MUL|DIV|POWER|MODULO) factor)*)|((MUL|DIV|POWER|MODULO|NULLISH)EQUALS expr)?

factor      : (PLUS|MINUS) factor
            : (BIN_NOT)* factor
            : (INC|DEC)* term
            : KEYWORD:typeof factor
            : prop

prop        : call (QMARK (DOT|DOUBLE_COLON (IDENTIFIER)?)|(DOT|DOUBLE_COLON IDENTIFIER) call_func|call_list)*

call_func   : (LPAREN (expr (COMMA expr)*)? RPAREN)*

call_list   : (QMARK DOT LSQUARE (expr)|(expr COLON expr) RSQUARE)*
            : (LSQUARE (expr)|(expr COLON expr) RSQUARE)* (EQUALS expr)? #almost the same for dictionnaries#

call_class  : KEYWORD:new IDENTIFIER call_func

call        : call_class | (atom (call_func|call_list)*)

atom        : NUMBER|(f)?STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : dict-expr
            : if-expr
            : for-expr
            : foreach-expr
            : while-expr
            : func-def
            : switch-expr
            : none
            : true|yes|no|false

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

dict-expr   : LBRACK (((expr COLON expr)|(IDENTIFIER) COMMA)*)? RBRACK

if-expr     : KEYWORD:IF expr COLON
                (statement if-expr-elif|if-expr-else?)
                | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else)

if-expr-elif: KEYWORD:ELIF expr COLON
                (statement if-expr-elif|if-expr-else?)
                | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else)

if-expr-else: KEYWORD:ELSE
                statement
                | (NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                (KEYWORD:STEP expr)? COLON
                statement
                | (NEWLINE statements KEYWORD:END)

foreach-expr: KEYWORD:FOREACH prop KEYWORD:AS (IDENTIFIER DOUBLE_ARROW IDENTIFIER)|(IDENTIFIER) COLON
                (statement) | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr COLON
                statement
                | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUNC IDENTIFIER?
                LPAREN (IDENTIFIER (QMARK (COLON Types)? (EQUALS expr)?)? (COMMA IDENTIFIER)*|TRIPLE_DOTS IDENTIFIER)? RPAREN
                (ARROW expr|KEYWORD:pass)
                | (COLON statements|KEYWORD:pass KEYWORD:END)

switch-expr : KEYWORD:switch LPAREN expr RPAREN COLON
                (KEYWORD:case expr (COMMA expr)* COLON statements)* # the comma means "or"
                (KEYWORD:default COLON statements)? # default means the end of the switch statement
                (KEYWORD:end)

concatenation = f"I am $age years old"